package com.asynchrony.nlp.classifier;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;

import edu.stanford.nlp.classify.Classifier;
import edu.stanford.nlp.classify.ColumnDataClassifier;
import edu.stanford.nlp.classify.ColumnDataClassifierExt;
import edu.stanford.nlp.util.StringUtils;

public class ColumnDataClassifierWrap {

	private Map<String, String> props;

	public ColumnDataClassifierWrap(Map<String, String> props) {
		this.props = props;
	}

	public void run() throws IOException {
		String[] args = propertiesToArgs(props);
		ColumnDataClassifier.main(args);
	}

	public void runFromExtendedClass() throws IOException {
			String[] args = propertiesToArgs(props);
			ColumnDataClassifierExt cdc = new ColumnDataClassifierExt(
					StringUtils.argsToProperties(args));
			if (cdc.globalFlags.loadClassifier == null && !cdc.trainClassifier())
				return;
			
			System.out.println("TWC trainClassifier = " + cdc.trainClassifier());
			String testFile = cdc.globalFlags.testFile;
			if (testFile != null)
				cdc.testClassifier(testFile);
	}
	
	protected String[] propertiesToArgs(Map<String, String> props) {
		ArrayList<String> argList = new ArrayList<String>();
		Set<String> keySet = props.keySet();
		for (String key : keySet) {
			argList.add(key);
			argList.add(props.get(key));
		}
		return argList.toArray(new String[argList.size()]);
	}

}
