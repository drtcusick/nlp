package com.asynchrony.nlp.training;

import java.util.List;

import edu.stanford.nlp.sentiment.RNNOptions;
import edu.stanford.nlp.sentiment.SentimentModel;
import edu.stanford.nlp.sentiment.SentimentTraining;
import edu.stanford.nlp.sentiment.SentimentUtils;

public class ModelTraining {
	
	
	/*
	 * java -mx8g edu.stanford.nlp.sentiment.SentimentTraining -numHid 25 
	 * -trainPath train.txt -devPath dev.txt -train -model model.ser.gz
	 * */
	
	
	public void trainModel()
	{
		SentimentTraining sentTrain = new SentimentTraining();
		
	}

	public void sentimentTrainingMain()
	{
		   RNNOptions op = new RNNOptions();

		    String trainPath = "sentimentTreesDebug.txt";
		    String devPath = null;

		    boolean runGradientCheck = false;
		    boolean runTraining = false;

		    String modelPath = null;

		    for (int argIndex = 0; argIndex < args.length; ) {
		      if (args[argIndex].equalsIgnoreCase("-train")) {
		        runTraining = true;
		        ++argIndex; }
		      if (args[argIndex].equalsIgnoreCase("-gradientcheck")) {
		        runGradientCheck = true;
		        ++argIndex; }
		      if (args[argIndex].equalsIgnoreCase("-trainpath")) {
		        trainPath = args[(argIndex + 1)];
		        argIndex += 2; }
		      if (args[argIndex].equalsIgnoreCase("-devpath")) {
		        devPath = args[(argIndex + 1)];
		        argIndex += 2; }
		      if (args[argIndex].equalsIgnoreCase("-model")) {
		        modelPath = args[(argIndex + 1)];
		        argIndex += 2;
		      }
		      int newArgIndex = op.setOption(args, argIndex);
		      if (newArgIndex == argIndex) {
		        throw new IllegalArgumentException("Unknown argument " + args[argIndex]);
		      }
		      argIndex = newArgIndex;
		    }

		    List trainingTrees = SentimentUtils.readTreesWithGoldLabels(trainPath);
		    List devTrees = SentimentUtils.readTreesWithGoldLabels(devPath);


		    System.err.println("Sentiment model options:\n" + op);
		    SentimentModel model = new SentimentModel(op, trainingTrees);


		    if (runGradientCheck) {
		      runGradientCheck(model, trainingTrees);
		    }

		    if (runTraining) {
		      train(model, modelPath, trainingTrees, devTrees);
		      model.saveSerialized(modelPath);
		    }

	}
}
