package com.asynchrony.nlp.sentiment;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

import edu.stanford.nlp.sentiment.Evaluate;

public class FirstTest {

	private static final String SENTIMENT_NEUTRAL = "Neutral";
	private static final String SENTIMENT_NEGATIVE = "Negative";
	private static final String SENTIMENT_POSITIVE = "Positive";
	private static final String TEST_SENTENCE_POS[] = { 
			"During the meeting, Steve was extremely insightful in his explaination of grey matter.",
			"Steve is great" };
	private static final String TEST_SENTENCE_NEG[] = {
			"The new workstation had terrible graphics and my eyes hurt.",
			"I totally bombed my annual review and will get no cookies next year." };
	private static final String TEST_SENTENCE_NEUTRAL[] = {	
			"Arun is a bad name for testing this software.",
			"",
			"" };
			
	
	private CustomSentimentPipeline testObject; 
	
	@Before
	public void setUp()
	{
		testObject = new CustomSentimentPipeline();
	}
	
	@Test
	public void testSentimentPipelineMainCode_Positive() throws Exception {
		String testSentence = "Arun did not diagnose the problem.";
		testObject.sentimentPipelineMainCode(testSentence);
		
		for (int i = 0; i < TEST_SENTENCE_POS.length; i++) {
			assertEquals("Test Case [" + i + "] = " + TEST_SENTENCE_POS[i], 
					SENTIMENT_POSITIVE, testObject.sentimentPipelineMainCode(TEST_SENTENCE_POS[i])[0]);
		}
	}
	
	@Test
	public void testSentimentPipelineMainCode_Negative() throws Exception {
		for (int i = 0; i < TEST_SENTENCE_POS.length; i++) {
			assertEquals("Test Case [" + i + "] = " + TEST_SENTENCE_NEG[i], 
					SENTIMENT_NEGATIVE, testObjecTEST_SENTENCE_NEGt.sentimentPipelineMainCode(TEST_SENTENCE_NEG[i])[0]);
		}
	}
	
	@Test
	public void testSentimentPipelineMainCode_Neutral() throws Exception {
		for (int i = 0; i < TEST_SENTENCE_POS.length; i++) {
			assertEquals("Test Case [" + i + "] = " + TEST_SENTENCE_NEUTRAL[i], 
					SENTIMENT_NEUTRAL, testObject.sentimentPipelineMainCode(TEST_SENTENCE_NEUTRAL[i])[0]);
		}
	}
	
}
